#swea learn course programming advanced

#5188 최소합
#최적화 효율보다는 문제에서 나올 수 있는 모든 정답 후보를 구해서 추가적인 조건까지 고려한 답을 찾아낼 수 있는가
#오른쪽과 아래만 고려하면 된다.
#dfs 구현 먼저 반복적인 재귀함수 호출한다.
dr = [0,1]#하
dc = [1,0]#우
def solve(r,c,now_sum):
    global min_sum
    if(r,c) == (n-1,n-1):
        min_sum = min(min_sum, now_sum)
        return

    for i in range(2):
        nr = r  + dr[i]
        nc = y + dc[i]
        if 0<=nx<N-1 and 0<=ny<N-1:
        if is_valid(nr,nc):
            solve(nr,nc, now_sum, +arr[nr][nc])

#파이썬의 재귀호출 횟수에는 한계가 있으므로 끝내는 조건,시점을 정확히 지정해야함
#좌표이동의 핵심은 nx,ny가 이차원배열 범위 안에 있어야 한다는 것.
T = int(input())
for tc in range(1,T+1):
    N = int(input())
    arr = [list(map(int,input().split() for _ in range(N)]
    answer = 10000
    dfs(0,0,arr[0][0])
print(f'{tc} {answer})